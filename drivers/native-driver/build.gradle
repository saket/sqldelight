apply plugin: 'org.jetbrains.kotlin.multiplatform'

kotlin {
  sourceSets {
    commonMain {
      dependencies {
        implementation deps.kotlin.stdlib.common
        api project (':sqldelight-runtime')
      }
    }
    commonTest {
      dependencies {
        implementation deps.kotlin.test.common
      }
    }
    nativeMain {
      dependencies {
        api deps.sqliter
        implementation deps.stately.core
      }
    }
    nativeTest {
      dependencies {
        implementation project(':drivers:driver-test')
        implementation deps.testhelp
      }
    }
  }

  targets {
    targetFromPreset(presets.iosX64, 'iosX64')
    targetFromPreset(presets.iosArm32, 'iosArm32')
    targetFromPreset(presets.iosArm64, 'iosArm64')
    targetFromPreset(presets.mingwX64, 'mingw') {
      compilations.main.extraOpts("-linker-options", "-Lc:\\msys64\\mingw64\\lib")
      compilations.test.extraOpts("-linker-options", "-Lc:\\ProgramData\\chocolatey\\lib\\SQLite\\tools")
    }
  }

  configure([targets.iosX64, targets.iosArm32, targets.iosArm64, targets.mingw]) {
    compilations.main.source(sourceSets.nativeMain)
    compilations.test.source(sourceSets.nativeTest)
    compilations.test {
      extraOpts("-linker-options", "-lsqlite3")
    }
  }
}

task iosTest {
  def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
  dependsOn 'linkIosX64'
  group = JavaBasePlugin.VERIFICATION_GROUP
  description = "Runs tests for target 'ios' on an iOS simulator"

  doLast {
    def binary = kotlin.targets.iosX64.binaries.getTest("DEBUG").outputDirectory.listFiles()[0]
    exec {
      commandLine 'xcrun', 'simctl', 'spawn', '--standalone', device, binary
    }
  }
}

apply from: "$rootDir/gradle/gradle-mvn-mpp-push.gradle"

publishing {
  publications.all {
    // Rewrite all artifacts from using the project name to just 'runtime'.
    artifactId = artifactId.replace(project.name, 'native-driver')
  }
}

afterEvaluate {
  // Alias the task names we use elsewhere to the new task names.
  tasks.register('install') {
    dependsOn('publishKotlinMultiplatformPublicationToMavenLocal')
  }
  tasks.register('installLocally') {
    dependsOn 'publishMetadataPublicationToTestRepository'
    dependsOn 'publishKotlinMultiplatformPublicationToTestRepository'
    dependsOn 'publishIosX64PublicationToTestRepository'
    dependsOn 'publishIosArm32PublicationToTestRepository'
    dependsOn 'publishIosArm64PublicationToTestRepository'
  }
  // NOTE: We do not alias uploadArchives because CI runs it on Linux and we only want to run it on Mac OS.
  //tasks.register('uploadArchives').dependsOn('publishKotlinMultiplatformPublicationToMavenRepository')
}
